(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var CALLBACK_REGEXP, rEscapedNewline, rNewline, _genRandomNum, _getJsonpFunc;

  CALLBACK_REGEXP = /[\?|&]callback=([a-z0-9_]+)/i;

  rNewline = /\n/g;

  rEscapedNewline = /\\n/g;

  module.exports.get = function(url, data, cb) {
    var key, queryPairs, value;
    data || (data = {});
    data.timestamp = new Date().getTime();
    if (!data.callback) {
      data.callback = "randomFunc_" + (_genRandomNum());
    }
    queryPairs = [];
    for (key in data) {
      value = data[key];
      queryPairs.push("" + key + "=" + value);
    }
    if (url.indexOf('?') === -1) {
      url += '?';
    } else {
      url += '&';
    }
    url += queryPairs.join('&');
    return _getJsonpFunc()(url, cb);
  };

  _genRandomNum = function() {
    return Math.random().toString().substr(2);
  };

  _getJsonpFunc = function() {
    var getCallbackFromUrl, loadScript;
    loadScript = function(url, cb) {
      var done, insertAt, script;
      script = document.createElement('script');
      done = false;
      script.type = 'text/javascript';
      script.src = url;
      script.async = true;
      script.onload = script.onreadystatechange = function() {
        if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
          done = true;
          script.onload = script.onreadystatechange = null;
          if (script && script.parentNode) {
            script.parentNode.removeChild(script);
          }
          return cb();
        }
      };
      insertAt = document.getElementsByTagName("script")[0];
      return insertAt.parentNode.insertBefore(script, insertAt);
    };
    getCallbackFromUrl = function(url, callback) {
      var matches;
      matches = url.match(CALLBACK_REGEXP);
      if (!matches) {
        return callback(new Error("Could not find callback on URL"));
      }
      return callback(null, matches[1]);
    };
    return function(url, callback) {
      return getCallbackFromUrl(url, function(err, callbackName) {
        var data, originalCallback;
        data = void 0;
        originalCallback = window[callbackName];
        if (err) {
          return callback(err);
        }
        window[callbackName] = function(jsonpData) {
          return data = jsonpData;
        };
        return loadScript(url, function(err) {
          var ex;
          if (!(err || data)) {
            err = new Error("Calling to " + callbackName + " did not returned a JSON response Make sure the callback " + callbackName + " exists and is properly formatted.");
          }
          if (originalCallback) {
            window[callbackName] = originalCallback;
          } else {
            try {
              delete window[callbackName];
            } catch (_error) {
              ex = _error;
              window[callbackName] = void 0;
            }
          }
          return callback(err, data);
        });
      });
    };
  };

}).call(this);

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var getURL, jsonpRequest, postURL, xmlHttpRequest;

  jsonpRequest = require('./jsonpRequest.coffee');

  xmlHttpRequest = require('./xmlHttpRequest.coffee');

  getURL = 'http://devapi.tuisongbao.com/v2/sdk/engine/server';

  postURL = 'http://dev.tuisongbao.com/api/fakeEngineAppServer/authUser';

  jsonpRequest.get(getURL, {
    appId: 'ab3d5241778158b2864c0852'
  }, function(err, ret) {
    if (err) {
      console.log(err, '+++++++++++++++==');
    }
    return console.log(ret, 'jsonpRequest+++++++++++++++==');
  });

  xmlHttpRequest.get(getURL, {
    appId: 'ab3d5241778158b2864c0852'
  }, function(err, ret) {
    if (err) {
      console.log(err, '+++++++++++++++==');
    }
    return console.log(ret, 'xmlHttpRequest+++++++++++++++==');
  });

  xmlHttpRequest.post(postURL, {
    channelName: "private-NX6YtHDzkGbI7XAd",
    socketId: "nuBlpWQnVnzH8NS9AAAF"
  }, function(err, authResult) {
    if (err) {
      return console.log(err, 'get error ===================');
    } else {
      return console.log(authResult, '=================');
    }
  });

}).call(this);

},{"./jsonpRequest.coffee":1,"./xmlHttpRequest.coffee":3}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var _getXHR, _request;

  _getXHR = function(opts) {
    var xdomain;
    if (opts == null) {
      opts = {};
    }
    xdomain = opts.xdomain;
    try {
      if (window.XDomainRequest) {
        return new XDomainRequest();
      }
    } catch (_error) {}
    try {
      if (window.XMLHttpRequest) {
        return new XMLHttpRequest();
      }
    } catch (_error) {}
    if (!xdomain) {
      try {
        return new ActiveXObject("Microsoft.XMLHTTP");
      } catch (_error) {}
    }
  };

  _request = function(method, url, headers, data, cb) {
    var err, isIE8, name, value, xhr;
    if (headers == null) {
      headers = {};
    }
    isIE8 = window.XDomainRequest ? true : false;
    xhr = _getXHR();
    xhr.open(method, url, true);
    if (!isIE8) {
      for (name in headers) {
        value = headers[name];
        xhr.setRequestHeader(name, value);
      }
    }
    xhr.onload = function() {
      var err, responseJSON;
      if (!isIE8) {
        if (xhr.readyState !== 4) {
          return;
        }
        if (xhr.status !== 200) {
          return cb(new Error("Unexpected response, status: " + xhr.status));
        }
      }
      try {
        responseJSON = JSON.parse(xhr.responseText);
      } catch (_error) {
        err = _error;
        return cb(err);
      }
      return cb(null, responseJSON);
    };
    xhr.onerror = function() {
      return cb(new Error("Unexpected response, status: " + xhr.status));
    };
    try {
      return xhr.send(data);
    } catch (_error) {
      err = _error;
      return cb(err);
    }
  };

  exports.get = function(url, data, cb) {
    var key, queryPairs, value;
    data || (data = {});
    data.timestamp = new Date().getTime();
    queryPairs = [];
    for (key in data) {
      value = data[key];
      queryPairs.push("" + key + "=" + value);
    }
    if (url.indexOf('?') === -1) {
      url += '?';
    } else {
      url += '&';
    }
    url += queryPairs.join('&');
    return _request('GET', url, null, null, cb);
  };

  exports.post = function(url, data, cb) {
    var headers;
    headers = {
      'Content-Type': 'application/json'
    };
    data = JSON.stringify(data);
    return _request('POST', url, headers, data, cb);
  };

}).call(this);

},{}]},{},[2]);
