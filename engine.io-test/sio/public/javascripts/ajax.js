(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Requester, Util, browserSupports, jsonpRequest, xmlHttpRequest;

  jsonpRequest = require('./jsonpRequest.coffee');

  xmlHttpRequest = require('./xmlHttpRequest.coffee');

  Util = require('./util.coffee');

  browserSupports = {
    chrome: {
      minVersion: 0
    },
    firefox: {
      minVersion: 0
    },
    safari: {
      minVersion: 0
    },
    msie: {
      minVersion: 8
    }
  };

  Requester = (function() {
    function Requester() {}

    Requester._parseGetUrl = function(url, data) {
      var key, queryPairs, value;
      data.timestamp = new Date().getTime();
      queryPairs = [];
      for (key in data) {
        value = data[key];
        queryPairs.push("" + key + "=" + value);
      }
      if (url.indexOf('?') === -1) {
        url += '?';
      } else {
        url += '&';
      }
      return url += queryPairs.join('&');
    };

    Requester.get = function(url, data, cb, opts) {
      var browserInfo, needJSONP, _ref;
      if (opts == null) {
        opts = {};
      }
      data || (data = {});
      needJSONP = false;
      if (opts.forceJSONP) {
        needJSONP = true;
      } else {
        browserInfo = Util.checkBrowser();
        if (!(parseFloat(browserInfo.versionNumber) >= ((_ref = browserSupports[browserInfo.browser]) != null ? _ref.minVersion : void 0))) {
          needJSONP = true;
        }
      }
      if (needJSONP) {
        if (!data.callback) {
          data.callback = "" + (Util.getRandomStr());
        }
        url = this._parseGetUrl(url, data);
        return jsonpRequest.get(url, cb);
      } else {
        url = this._parseGetUrl(url, data);
        return xmlHttpRequest.get(url, cb);
      }
    };

    Requester.post = function(url, data, cb, opts) {
      return xmlHttpRequest.post(url, data, cb);
    };

    return Requester;

  })();

  module.exports = Requester;

}).call(this);

},{"./jsonpRequest.coffee":2,"./util.coffee":4,"./xmlHttpRequest.coffee":5}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var callbackRegExp, _getJsonpFunc;

  callbackRegExp = /[\?|&]callback=([a-z0-9_]+)/i;

  module.exports.get = function(url, cb) {
    return _getJsonpFunc()(url, cb);
  };

  _getJsonpFunc = function() {
    var getCallbackFromUrl, loadScript;
    loadScript = function(url, cb) {
      var done, insertAt, script;
      script = document.createElement('script');
      done = false;
      script.type = 'text/javascript';
      script.src = url;
      script.async = true;
      script.onload = script.onreadystatechange = function() {
        if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
          done = true;
          script.onload = script.onreadystatechange = null;
          if (script && script.parentNode) {
            script.parentNode.removeChild(script);
          }
          return cb();
        }
      };
      insertAt = document.getElementsByTagName('script')[0];
      return insertAt.parentNode.insertBefore(script, insertAt);
    };
    getCallbackFromUrl = function(url, callback) {
      var matches;
      matches = url.match(callbackRegExp);
      if (!matches) {
        return callback(new Error('Could not find callback on URL'));
      }
      return callback(null, matches[1]);
    };
    return function(url, callback) {
      return getCallbackFromUrl(url, function(err, callbackName) {
        var data, originalCallback;
        if (err) {
          return callback(err);
        }
        data = void 0;
        originalCallback = window[callbackName];
        window[callbackName] = function(jsonpData) {
          return data = jsonpData;
        };
        return loadScript(url, function(err) {
          var error;
          if (!(err || data)) {
            error = new Error("Calling to " + callbackName + " did not returned a JSON response Make sure the callback " + callbackName + " exists and is properly formatted.");
          }
          if (originalCallback) {
            window[callbackName] = originalCallback;
          } else {
            try {
              delete window[callbackName];
            } catch (_error) {
              err = _error;
              window[callbackName] = void 0;
            }
          }
          return callback(error, data);
        });
      });
    };
  };

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var getURL, postURL, requester;

  requester = require('./index.coffee');

  getURL = 'http://devapi.tuisongbao.com/v2/sdk/engine/server';

  postURL = 'http://dev.tuisongbao.com/api/fakeEngineAppServer/authUser';

  requester.get(getURL, {
    appId: 'ab3d5241778158b2864c0852'
  }, function(err, ret) {
    if (err) {
      console.log(err, '+++++++++++++++==');
    }
    return console.log(ret, 'normal+++++++++++++++==');
  });

  requester.get(getURL, {
    appId: 'ab3d5241778158b2864c0852'
  }, function(err, ret) {
    if (err) {
      console.log(err, '+++++++++++++++==');
    }
    return console.log(ret, 'forceJSONP+++++++++++++++==');
  }, {
    forceJSONP: true
  });

}).call(this);

},{"./index.coffee":1}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Utils;

  Utils = (function() {
    function Utils() {}

    Utils.throwError = function(error) {
      var err;
      err = new Error(error.message || error);
      err.name = 'EngineError';
      throw err;
    };

    Utils.getRandomStr = function() {
      var i, possibleChars, randomChars;
      possibleChars = 'abcdefghijklmnopqrstuvwxyz_';
      randomChars = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 10; i = ++_i) {
          _results.push(possibleChars[Math.floor(Math.random() * possibleChars.length)]);
        }
        return _results;
      })();
      return randomChars.join('');
    };

    Utils.checkBrowser = function() {
      var match, platform_match, ua;
      ua = window.navigator.userAgent.toLowerCase();
      match = /(edge)\/([\w.]+)/.exec(ua) || /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
      platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(silk)/.exec(ua) || /(android)/.exec(ua) || /(windows phone)/.exec(ua) || /(win)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || /(playbook)/.exec(ua) || /(bb)/.exec(ua) || /(blackberry)/.exec(ua) || [];
      return {
        browser: match[5] || match[3] || match[1] || '',
        version: match[2] || match[4] || '0',
        versionNumber: match[4] || match[2] || '0',
        platform: platform_match[0] || ''
      };
    };

    return Utils;

  })();

  module.exports = Utils;

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var _getXHR, _request;

  _getXHR = function() {
    try {
      if (window.XDomainRequest) {
        return new XDomainRequest();
      }
    } catch (_error) {}
    try {
      if (window.XMLHttpRequest) {
        return new XMLHttpRequest();
      }
    } catch (_error) {}
  };

  _request = function(method, url, headers, data, cb) {
    var err, hasXDomainRequest, name, value, xhr;
    if (headers == null) {
      headers = {};
    }
    hasXDomainRequest = window.XDomainRequest ? true : false;
    xhr = _getXHR();
    xhr.open(method, url, true);
    if (!hasXDomainRequest) {
      for (name in headers) {
        value = headers[name];
        xhr.setRequestHeader(name, value);
      }
    }
    xhr.onload = function() {
      var err, responseJSON;
      if (!hasXDomainRequest) {
        if (xhr.readyState !== 4) {
          return;
        }
        if (xhr.status !== 200) {
          return cb(new Error("Unexpected response, status: " + xhr.status));
        }
      }
      try {
        responseJSON = JSON.parse(xhr.responseText);
      } catch (_error) {
        err = _error;
        return cb(err);
      }
      return cb(null, responseJSON);
    };
    xhr.onerror = function() {
      return cb(new Error("Unexpected response, status: " + xhr.status));
    };
    try {
      return xhr.send(data);
    } catch (_error) {
      err = _error;
      return cb(err);
    }
  };

  exports.get = function(url, cb) {
    return _request('GET', url, null, null, cb);
  };

  exports.post = function(url, data, cb) {
    var headers;
    headers = {
      'Content-Type': 'application/json'
    };
    data = JSON.stringify(data);
    return _request('POST', url, headers, data, cb);
  };

}).call(this);

},{}]},{},[3]);
